MEMO

# DB Migration 

local to docker container
docker container to local

brew install postgresql
brew install tableplus
brew install sqlc // sql to go 

go get github.com/lib/pq
go get github.com/stretchr/testify

# CRUD sqlc

# Unit tests

When writing Unit tests,
Should make sure that they are independent from each other.
Why: hard to maintain if has hundred of tests that depends on each other.

# Transaction

DB Transaction

Why?
1. To provide a reliable and consistent unit of work, even in case of system failure.
2. To provide isolation between programs that access the database concurrently.

A: Atomicity
C: Consistency
I: Isolation
D: Durability

Closure is often used when want to get the result from a callback function.
the callback function itself doesn't know the exact type of the result it should return

# Caution when Database Transaction
concurrency carefully!
The best way that is run it with several concurrent go routines

# Update Account within Transaction
Require careful handing of concurrent transactions to avoid deadlock
database locking 

# TDD | test driven development
Tests first to make our current code breaks

# Deadlock postgresql
https://wiki.postgresql.org/wiki/Lock_Monitoring
Deadlock ocuurs because 2 concurrent transactions both need to wait for each other

can resolve deadlock consider order of transactions

SELECT * FROM accounts WHERE id = $1 LIMIT 1
+ FOR NO KEY UPDATE

# Isolation level
dirty read | read uncommitted
non-repeatable read |read committed
phantom read | repeatable read
serializable

postgresql tx begin first when change isolation level
repeatable read -> return error
serializable -> prevent to repeat

postgresql uses a dependencies checking mechanism
to detect potensial read phenomena and stop them by throwing error